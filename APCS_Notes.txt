9/9/16 Java Basics - Arguments from the command line

public class Helloargs {
	public static void main(String[] args) 
	{
	System.out.println("Hello, " + args[0]);
    	}
}

/* 	To run, compile and java HelloWorld <argument>
	Arguments are stored in the arguments array */

Scanner is the class

Scanner sc = new Scanner(System.in);

9/14/16 Declaring variables
Java is a strongly typed language
<DataType> <Variable>;

System.out.println(x = "Jane"); is valid //IFF x is declared

9/15/16 Strings
1 + 5 + "45" + 12 returns "64512" :)

9/16/16 Integer Data type
- primitive : int
- Object : Integer
- The integer set has closure property for all operators
    int operator int = int
- operators: +, - , *, /, %
-Converting Strings to an integer
   Integer.parseInt(<String>) returns integer

9/19/16 Integers
trunc(3.4) = 3 
trunc(8.999) = 8 // Chops off floating point -- data loss


int y = 8 / 0 //Runtime error - division by zero

Remainders (%) mod operator
r = n % d
r : remainder
n : dividend
d : divisor

Java Definition: r = n - trunc(n/d)*d
always same sign as dividend

Python
Always same sign as divisor

9/20/16
y = 3
x = 1

floor()                   
int z = (int) 5.3; // z = 5 () trunc operation
casting has a high precedence than operators

Legal Double values
(+) Infinity, -Infinity
Divide by zero in doubles

NaN -Not a Number
Math.sqrt(-1.0) = NaN

Scientific Notation
double x = 2.87e3;

Type Conversion
(I.) Explicit Type Conversion
	- String -> Double
	- Double.parseDouble(String) -> double
(II.) Explicit Cast
	(double) 3 = 3.0
(III.)Automatic Promotion
	double operator int 


public Static void main(String args[]){
	cow();
	System.out.println();
}

public Static void cow(){
}

public - modifier
static - free method
void - return type


9/28/16
Static Methods
- Modifiers
	public : available both inside and outside defined class
	private : only available inside class
	protected : only available within its class and subclass

- Side effects
	A method produces a side effect if it consumes input, produces output or changes the state of the program

- Mathematical Functions
	Does not produce side effects, recieves arguments and returns a value
- Mathematical Overloading
	Java supports method overloading (as long as signatures are different)
		printName(String , String)
		printName(String, String, String)

9/29/16  Object Oriented Programming
- Create our own data types

UML - Unified Markup language
class : Object
Capabilities Methods and Constructors:
// + (public) - (private) # (protected)
+ Object()
+ toString() : String

new <Constructor> --> instantiates an Object, creates an instance of the Object

A Constructor is a special method that has the instructions on how to initialize an object

public class ObjectDemo{
	public static void main(String args[]){
		Object obj1 = new Object();
		A a1 = new A();
		A a2 = new A("Hello");
		System.out.println(obj1.toString());
		System.out.println(a1.toString());
		System.out.println(a2.toString());
	}
}

java.lang.Object@784d2125      Class@ID

public class A extends Object{
	private String _s;

	//constructor
	public A(){
		super(); //creation
		_s = "DEFAULT";
	}
	
	//Overload THE CONSTRUCTOR
	public A(String s){
		super();
		_s = s;
	}

	//overwrite the toString() method inherited from the Object class
	public String toString(){
		String ans = super.toString();
		ans += "_s : " + _s;
		return ans;
	}
}

super() means parent to construct itself
Object: super, parent, base class
A: subclass child


instance variables start with an underscore
public class B extends A{
	//instance variable
	private int _n;

	//constructor
	public B(){
		super();
		_n = -1;
	}
	
	//overwrite the toString() method inherited from A
	public String toString(){
		String ans = super.toString();
		ans += "_n : " + _n;
		return ans;


10/11/16
a. Boolean Values
	primitive data type: boolean
		ex. boolean b2 = false;
			b2.toString() --> Comp Error
	Wrapper Class : Boolean
		ex. Boolean b1 = new Boolean(false);
			b2.toString() --> "false"
	-No ordering property
	-values : true, false
	Autoboxing automatically puts data into object
b. Relational Operators: > , < , >= , <=
nummeric arguments, boolean output
	ex. int a = 1, b = 7, c = 10;
	boolean valid1 = a <= b <= c;
	(a <= b) <= c
	TRUE <= 10
	Compilation ERROR
	***LEFT TO RIGHT***
Operator Precedence
	Object creation and casting: new(type)
	Logical NOT !
	Multiplication and Division: * ,  / , %
	Addition and Subtraction: + , -
	Relational Operators: > , >= , < , <=
	Equality operators: == ,  !=
	Logical AND : &&
	Logical OR : ||
	Assignment:  = , += , -= , *= , /= , %=
c. Equality and Inequality ( == ,  !=)
	Primitives (int, double, boolean)
		-Given a and b are primitive data types
			a == b a and b are equal
			a =! b a and b are not equal
		-ex.	
			int year 2016;
			boolean isEven = year % == 0; //true
			boolean compare = 1 + 1 == 1; //false
			boolean test = compare == false; //true

			1.0 - 2.0 / 3.0 == 1.0 / 3.0
	Objects 
			



cp .:.. command shows where to find

10/13/16

a. Equality and Inequality
	- Primitive data types (int, double, boolean)
		Widening Conversions: For the primitive data types, a value of a narrower datatype can be converted into a wider datatype without loss of data.
		int == double --> doube == double ***
	
	- Objects
		Checking to see if they are the same object
		Based on reference value

b. Conditional Operators

String s = null;
boolean = s != null;
//returns false

10/17/16
Object Equality
	Object a = new Object();
	Object b = new Object();
	Object a = c;

	== checks reference value
	.equals checks value of object 
		aliases (the same) of the same object
	(i)	a == b; FALSE 
	(ii)	a == c; TRUE
	(iii)	a.equals(b); FALSE
	(iv)	a.equals(c); TRUE

	Two strings are equal if they contain the same sequence of characters
	string s1 = "howdy";
	string s2 = ne String("howdy");
	string s3 = "howdy";
	
	(i)	s1 == s1; TRUE
	(ii)	s1 == s2; FALSE
	(iii)	s1.equals(s1); TRUE
	(iv)	s1.equals(s2); TRUE
	(v)	s1 == s3; MAYBE , MOSTLY TRUE (During comp, it may or may not refer to object)
	(v)	s1.equals(s2); TRUE

	String s = null;
	String t = "howdy";

	pointer == reference

	(i) t.equals(s) FALSE
	(ii) s.equals(t) Runtime Error

	F, T, T, F

Conditional Operators || , &&

	AND HAS HIGHER PRECEDENCE!!!!!!!!!!!!!!!!

Flow Control


10/18/16

if ( boolean) {
	statement1;
	statement2;
}

if  (boolean){}
else {}

10/20/16

while (boolean expression)
	statement;
for (<initialization> ; <boolean> ; <update>){
	statement 1;
	statement 2;
}

10/26/16
Strings are immutable
.length() returns num. of characters
"abc".substring(1, 2) -> "b"
"abc".substring(1) -> "bc"

10/27/16
	indexOf(String) -> int   (first occurance from left)
	"apple".indexOf("a") -> 0
	"apple".indexOf("p") -> 1
	"apple".indexOf("ple") -> 2
	"apple".indexOf("z") -> -1
break; -> breaks the loop (for or while)

static - class -level
CONVENTION- all final variables are Uppercase

10/28/16
	String VOWELS = "aeiou";
	public static Boolean isVowel(String w){
		
		return VOWELS.indexOf(w) != -1;
}

	public static String collectVowels(String w){
		String values = "";
		for (int i = 0; i < w.length(); i ++)
			for ( int j = 0; j < VOWELS.length(); j++)
				if (w.substring(i,i + 1).equals((VOWELS.substring(j, j + 1))
					values += w.substring(i , i + 1);
		return values

}
	
lexiographic order in java:
String method:
	.compareTo(String) -> int
	String A, B;
	A.compareTo(B) -/ Negative when A < B
		        | 0 when equal strings
			\ Positive when A > B

	"a".compareTo("b") < 0 -> true
	"b".compareTo("a") < 0 -> false

11/2/16
Building a coin class

11/7/16

A super class reference can denote objects of its subclasses

	Coin c1 = new Coin(); // ok
	Coin c2 = ne BiasedCoin(0.2); // ok b/c A BiasedCoin is a Coin
	BiasedCoin c3 = new Coin(); //Comp. Error: Not all coins are biased coins

Polymorphism:
	Which object a reference will actually denote during runtime cannot be determined at compile time. Polymorphism allows a reference to denote different objects in the inheritance hierarchy at different times during execution.
	ex.
		Coin c;
		if (Math.random() > 5)
			c = new Coin();
		else
			c = new BiasedCoin(0.2);

Dynamic Method Lookup:
	When a method is invoked using a reference the method definition which actually gets executed is determined by the class of the object denoted by the reference ar runtime.
	ex.
		Coin c;
		if (Math.random() > 5)
			c = new Coin();
		else
			c = new BiasedCoin(0.2);

P(H) = 35%

Will this code compile?
	Object c = new Coin(); // ok A Coin is an Object
	//c.flip();	// Compilation Error. The Object Class does not have a flip method
	((Coin) c).flip(); //ok Type Cast

THIS WILL COMPILE, BUT NOT RUN
	Object c = new String("hi"); 
	((Coin) c).flip(); 

	RUNTIME ERROR

***For compilation, look at left-hand side of equation only (unless syntax error) Compiler compares types*****

PseudoInheritance:
	Any instance variable that is declared private in the superclass cannot be directly accessed by a subclass, although it is inherited by the subclass

	ex. public class A{
		private int _x;

		public A(int x){
			_x = x;
		}
		
		public int f(){return _x + 2}
		public int f(){return _x + 2}
	}

	public class B extends A{
		private int _y;

		public B (int y){
			super(1);
			_y = y;
		}
		public int g() {return 3 * _y}
	}

	public class C extends B{
		private int _z;

		public C (int z){
			super(2);
			_z = z;
		}
		public int h() {return f() + g() + _z}
	}

c.f() // 3
c.g() // 6
c.h() // 19

A c = new C(10);
c.f() // 3
c.g() // 6
c.h() // COMPILER ERROR (No h() in A)

11/9/16
Arrays:
	An array is a data structure which defines an ordered collection of a fixed number of homogenous data elements. 
	Arrays, Mulridimensional arrays, lists
	**All elements in the array have the same data type**
	- Size of the array is fixed
	- Arrays are objects
	- Arrays can be of primitive datatypes or reference types
	- Each array object has an instance variable, length, which specifies the number of elements the array can accomadate
	- Simple arrays are one-dimensional
	- Since arrays can store object references, the objects referenced can also be an array of arrays (Multi-dimensional)

Declaring Array variables
	Form 1: <datatype> [] <arrayname>;
	Form 2: <datatype> <arrayname> [];

	int [] numbers;
	Person [] people, group;
	String names [], first;

numbers, people, group, names are array REFRENCES!
first is a string reference

Constructing an array:
	 Form <arrayname> = new <datatype>[<length>];
		where length is a non-negative integer

	numbers = new int [10];
	people = new Person [5];

numbers is a reference to an array of 10 integers. Each default integer value is 0. 
null is default for custom for reference

int [] numbers = new int [-2];
Runtime Error

Person [] group = new Person [2.0];
Compiler Error

Initializing an array:
	<datatype> [] <arrayname> = {<arrayInitializeCode>};
	ex
		int [] numbers = {1,2,3,4,5};
		Person [] people = {newPerson("Billy","Bob"),null,null};  

11/10/16
Using an array:
	- [n] operator is used to access the (n - 1)th value in the array.
	- n must be an integer where 0 <= n < length

	ex
		int[] odds = new int[5];
		for(int i = 0; i < odds.length(); i++)
			odds[i] = 2 * i + 1
		// results in [1,3,5,7,9]

	System.out.println(odds); //[i@345bd3]
	
	for (int i = 0; i < odds.length(); i++)
		System.out.println(odds[i]);

"For Each loop"
	for (int x : odds)
		System.out.println(x);

11/15/16
Binary Numbers
Hexadecimal Numbers
Octal Numbers

1: Compute r = n % b
2: Compute q = n / b
3: if q = 0, answer is "123231"
	else i++
		n = q
	go to step 1


public static void badShuffle(Object [] array){
	int n = array.length;
	for (int i = 0; i < n; i++){
		int r = (int) (Math.random() * n);
		Object rElement = array[r];
		array[r] = array[i];
		array[i] = rElement;
	}
}

n^n possibilities for bad shuffle
n! possibilities for good shuffle

n^n % n! != 0 in general

Interfaces usually end in -er or -able

12/7/16

Integer implements Comperable<Integer>
Double implements Comperable<Double>
String implements Comperable<String>
Boolean implements Comperable<Boolean>

Linear Search

Binary Search
	A Divide and Conquer Algorithm
	ex: [1,5,8,13,21,100,108]
	key = 7
	compares key to the middle of the data
`	1st step: 7 < 13
	[1,5,8]
	2nd step: 7 > 5
	[8] 

return -1  : NOT FOUND

Convention
	Let a and b be integers and [a, b) is an interval of integers, then the length of the interval is simply b - a

ex. [0, 3) the length is 3

[See notes on Selection, Insertion and Bubble Sorts, as well as O()]

12/21/16
Two dimensional arrays:
Integer [][] array = new Integer[3][3]

default for all primitive numbers in zero
default for boolean in array is false
default for objects in array are null

Row Major Order-
Processing an array row by row.

Matrix addition
A + B + C

outer:
for(){
	inner:
	for(){
		if(){
			ans = newPoint();
			break outer;
		}
	}
}

1/5/17

The List ADT 
Abstract Data Type (ADT)- defined by operstion and behavior - doesn't have to be implemented as an abstract class (set is also an ADT)

In Java, a list is a ADT that represents a collection defined in the List<E> interface

List<E> Interface
	import java.util.List;
	uses generics: List <Integer>, List <String>
	A List is a refrence type
	A List cannot be instantiated
		BAD: new List<String>   
	A List is an iterable collection
		Both versions of for loop are supported
	
	Capabilities:
		List<Integers> L = <some concrete data structure>
		
		int size();				O(1)
		boolean add(E obj);			O(1) except in rare cases O(x)
		void add(int index, E obj);		O(x)
		E get(int index);			O(1)
		E set(int index, E obj);		O(1)
		E remove(int index);			O(x) except when removing last element

		Invoked Method		Value Returned		State of L after method is invoked
		L.size()			0				[]
		L.add(3);			true				[3]
		L.add(1);			true				[3,1]
		L.add(0,4);			void				[4,3,1]
		L.add(3,7);			void				[4,3,1,7]
		L.get(2);			1				[4,3,1,7]
		L.set(2,5);			1				[4,3,5,7]
		L.remove(0);			4				[3,5,7]

		List<Integer> L = [3,4,...,5];
		int ans = 0;
		for(int i = 0; i < L.size(); i++)
			ans += L.get(i);

		for(Integer i : List)
			ans += i;

		//Switching first and last element with one line of code
		L.set(0, L.set(last,L.get(0)));


1/27/17

Linear Recursion

1. Euclid's Algorithm for computinng the greatest common divisor of 2 integers

public static int gcd(int a , int b){
	//base case
	if (a % b == 0)
		return b;
	//recursive self
	return gcd(b, a % b);
}

2. Factorial function

public static int factorial(int a){
	if (a <= 1)
		return 1;
	return a * factorial(a - 1);
}

3. Function to reverse a string

ex. reverse("desserts") --> "stressed"

public static String reverse(String s){
	int length = s.length();
	if (length <= 1)
		return s;
	return s.substring(length - 1) + reverse(s.substring(0,length - 1));
} 

public static String commas(int a){
	public static String commas(int a){
	if (a < 1000)
		return a + "";
	String t = a + "";
	return commas(a / 1000)  + "," + t.substring(t.length() - 3);
	} 
} 

Looks for min
public static int compute(int [] a , int n){
	if( n == 0 || a[n] < compute(a, n - 1))
		return a[n];
	return compute(a, n - 1);
}

public static int compute(int [] a , int n){
	if (n == 0) return a[0];
	int x = compute(a, n - 1);
	if (a[n] < x) return a[n];
}

For Big O notation, n represents the size of the array gone through

     public static int mult(int a, int b){
     	    if (b == 0) return 0;
	    if (b % 2 == 0) return mult(a+a, b/2);
	    return mult(a+a, b/2) + a;
     }

 a. Draw a trace diagram for mult(3,12).

	mult(6, 6) 
	mult(12, 3) 
	mult(24, 1) + 12
	mult(48, 0) + 24
	36

 b. What is the exptected runtime of the mult(int,int) function?

n represents b
log n is cut in half each time

	O(log n)


2/7/17

public static String m(String a){
	int len = a.length();
	if (len < 2) return a;
	if (len == 2) return a.substring(1) + a.substring(0, 1);
	return m(a.substring(len / 2)) + m(a.substring(0, len/2));
}

m("java") --> avaj
m("mystery") --> yretsym
	O(n)
Big O for recursion is number of function calls

2/8/17
1. Why is the middle calculated as 
	middle = lowerBound + (upperBound - lowerBound)/2;
		Integer Overflow is a problem
2. What is the expected runtime of the binary search?
		log(n)
3. Given {10,5,233,14,7,11}, which keys will be found?
		14, 5

Email both programs (Roman and BinarySearchR class)
	rick.platek@stuycs.org

Merge List w/o allocation
O(n^2) expected runtime
O(1) Additional Memory

Merge List w/ allocation
O(n) expected runtime
O(n) Additional Memory

Other algorithms are able to reduce runtime, at cost of memory

2/14/17
SORTS!!!!!
-Selection
-Insertion
-Merge Sort
-Quick Sort

Big O is necessary!

Merge Sort Algorithm:
Phase 1: Divide the data set into halves until the length of each region is less than two
Phase 2: Merge each adjacent region untilall the data is merged

Trace (Merge Sort : Top Down Recursive Version)
data: 85, 2, 12, 33, 45, 3, 4, 11
85, 2, 12, 33 		45, 3, 4, 11
85, 2	12, 33		45, 3	4, 11
85	2	12	33	45	3	4	11
2, 85	12, 33		3, 45	4, 11
2, 12, 33, 85		3, 4, 11, 45
2, 3, 4, 11, 12, 33, 45, 85

Height of tree will be roughly be log(n)

Mergen elements is O(n)
Merge Sort is O(nlogn) 

Insertion sort is O(n^2)
Both insertion sort and merge sort are data insensitive

Partition function (linear runtime)

public static void partition(int [] data){
	if(data.length == 0 || isSorted(data)) return;
	int min = data[0];
	for (int i = 0; i < data.length; i++){
		if (data[i] < min){
			min = data[i];
			break;
		}
	}
	int pos = 0;
	int r = data.length - 1;
	while (pos < r){
		if (data[pos] > min){
			exch(data, pos, r--);
		}
		else pos++;
	}
}

//Dutch Flag Problem
while (low < high){
	if (data[low] == min) low++;
	else if (data[high] == min){
		exch(data,low,high);
		high--;
		low++;
	}
	else high++;
}

QUICKSORT
Data: 3, 8, 2, 1, 7, 9, 4

Pivot 3: 3, 8, 2, 1, 7, 9, 4
	 L		   R
(advance left): 3, 8, 2, 1, 7, 9, 4
		   L		  R
(advance right): 3, 8, 2, 1, 7, 9, 4
		    L	  R
L < R: 3, 1, 2, 8, 7, 9, 4
	  L	R
(advance left): 3, 1, 2, 8, 7, 9, 4
			R,L
(8 is first entry greater tan pivot)
(advance right): 3, 1, 2, 8, 7, 9, 4
		       R  L
L >= R: 2, 1, 3, 8, 7, 9, 4
Pivot switched with R when R crosses
2 becomes Pivot

			Runtime		Additional Space
QuickSort	Expected: O(nlogn)	O(1)
		Worst Case: O(n^2)	O(1)
MergeSort		O(nlogn)	O(n)


Node Data Type:
	Store a value (String) and a reference to another node
		_value = "a" _next = null

Linked List:
	A recursive data structure
	Is either empty(null) or a node whose _next attribute refrences a linked list

Example:
	Node head = null; // head -> null
	head = new Node("b"); //head -> b -> null
	head = newNode("a",head); //head -> a -> b -> null

	head.getValue(); //"a"
	head.getNext(); //Node that stores "b"
	head.getNext().getValue(); // "b"
	head.getNext().getNext(); //null
	head.getNext().getNext().getValue(); //NullPointerException (Runtime Error)
	head = head.getNext();
	head.getValue(); //"b"
		Node with value "a" has no references to it, data is lost and is eventually picked up by garbage collector.

	head.getNext().setNext(new Node("c"));

public static int length(Node h){
	if (h == null) return 0;
	if (h.getNext() == null) return 1;
	else return length(h.getNext()) + 1;
}

public static void print(Node h){
	if (h == null) return;
	System.out.println(h.getValue());
	print(h.getNext());
}

public static void print(Node h){
	while (h != null){
		System.out.println(h.getValue();)
		h = h.getNode();
	}

}

public static void reversePrint(Node h){
	ArrayList <String> s = new ArrayList<String>();
	while (h != null){
		s.add(h.getValue());
	}
	for (int i = s.size() - 1; i >= 0; i--)
		System.out.println(s.get(i));
}

3/6/17
Linked Nodes

Adding elements to a list:
public static Node addFirst(Node h, String s){
	return new Node(s,null);
}

//This version is memory-intensive, creates a copy of each node
public static Node addLast(Node h, String h){
	if (h == null) return new Node(s);
	else return addFirst(addLast(h.getNext(), h), h.getValue());
}

//recursive
public static Node addLast(Node h, String s){
	if(h.getNext() == null) return addFirst(h, s);
	h.setNext(addLast(h.getNext(), s);
	return h;
}

//iterative
public static Node addLast(Node h, String s){
	Node front = h;
	if (h == null) return addFirst(h, s);
	while (h.getNext() != null) h = h.getNext();
	h.setNext(new Node(s));
	return front;
}

//recursive
public static Node search(Node h, String s){
	if(h == null || s.equals(h.getValue())) return h;
	return search(h.getNext(), s);
}

//iterative
public static Node search(Node h, String s){
	if(h == null || s == h.getValue()) return h;
	while (h.getNext() != null && !s.equals(h.getValue())) 
		h = h.getNext();
	return h;
}

public static Node removeFirst(Node h, String s){
//removes the first occurennce of s from the linked
//list starting at h also returns the head of the
//modifed linked list

//Ex: Node h = ... //h -> a -> b -> a -> b -> null
// h = removeFirst(h, "b"); //h -> a -> a -> b -> null
	
}

3/15/17
Abstract Data Type
 - Is a data type defined by its behavior and capabilities rather than its implementation

Stack (ADT)
 - Last in, first out data structure
 - Stack of pancakes

Stack interface - Stack.java
	public void push(E item); - Add to the top
    public E pop();  - Take off the top item of a stack //Empty Stack Exception possible
    public E peek(); - Look at the top  //Empty Stack Exception possible
    public boolean empty();

Ex.
Stack <String> s = <Some Implementation>;
s.push("a");
s.push("b");
s.push("c");
while (!s.empty())
	System.out.println(s.pop());

NodeStack
	Private attribute
	private Node <E> _head;

3/16/17
ALL PREVIOUS EXAMS
Know quicksort runtime and behavior
//O(nlogn) runtime
//worst case O(n^2) runtime 
//O(1) memory 
Know List interface, slinkedlist
Stack interface, implementation of the stack

2. Assume there are 3 array stacks, A, B and C. 
   A has a capacity of 100 and is full.
   B has a capacity of 5 and is empty.
   C has a capacity of 3 and is also empty.

   Using only the transferTo method, how would you get 4 elements into 
   Stack B.
	A.transferTo(C); 0 3
	C.transferTo(B); 3 0
	A.transferTo(C); 3 3
	C.transferTo(B); 5 1
	B.transferTo(A); 0 1
	C.transferTo(B); 1 0
	A.transferTo(C); 1 3
	C.transferTo(B); 4 0

Doubly Linked List Nodes
E value
DNode <E> _next
DNode <E> _previous

DNode <String> a = new DNode<String>("Amy",null,null);
DNode <String> b = new DNode<String>("Bill",a,null);
DNode <String> c = new DNode<String>("Carol",b,null);

Queues:
All methods have runtime of O(1)

Design and Build ArrayQueue
1. Use a fixed size array (no resizing!)
2. Following methods must run in O(1) time:
	size(), empty(), front(), dequeue(), enqueue(), isFull()
If full, throw Full queue exception

4/20/17
For-each loops and Iterators
	In Java a Collection can utilize the for-each loop provided that it implements the Iterable interface

Iterable.java is located in java.lang

Modify List.java
import java.util.Iterator;

interface List<E> extends Iterable<E>{
	int size();
	..
	..
	..
	Iterator<E> iterator();
}

Methods of Iterator:
public interface Iterator<E> {
	boolean hasNext();
	E next();
	void remove();
}

Example of using an iterator directly:
List<Integer> L = <some_kinf_of_list>;
L.add(1); L.add(2); //[1,2]
Iterator<Integer> itr = L.iterator();
while (itr.hasNext()){
	System.out.println(itr.next());
}
//output : 1 /n 2

4/27/17
Binary Tree
In a binary tree, each node except for the root has one parent. Each node contains refrences to its left and right children; a null value indicates that the corresponding child is not in the tree. A node that doesn't have any children is called a leaf. Each node is a root of a smaller binary tree.

The height of a tree is the length of the longest path from root to leaf. (The number of links between nodes)

Trees are almost always handled recursively

A travesal is when each node is visited. There are 3 common types of tree traversals: inorder, preorder, and postorder

	1
	/\
	2 3
	/  /\
	4  5  6
	   /\
	   7 8

Inorder Traversal
	1. Go left if possible
	2. Process that node
	3. Go right if possible

Ex. 2, 4, 1, 7, 5, 8, 3, 6

Preorder Traversal
	1. Process the node
	2. Go left if possible
	3. Go right if possible

Ex. 1, 2, 4, 3, 5, 7, 8, 6

Postorder Traversal
	1. Go left if possible 
	2. Go right if possible
	3. Process the node

Ex. 4, 2, 7, 8, 5, 6, 3, 1

HiddenWord puzzle = new HiddenWord("HARPS");

preorder: 1, 8, 3, 10, 7, 9, 11
inorder: 10, 3, 8, 1, 9, 7, 11 XINCORRECTX
	8, 3, 10, 1, 9, 7, 11
postorder: 10, 3, 8, 9, 11, 7, 1

Given the following traversals, find the binary tree

inorder: 3, 10, 8, 4, 9, 7, 11
preorder: 4, 8, 3, 10, 7, 9, 11
postorder: 10, 3, 8, 9, 11, 7, 4

		4
		/ \
		8  7
	       /   /\
	      3   9 11
	      \
	       10
--------------------------------------------
		1
		/ \
	       2   3
	       \   /\
	       4  5  6
		  /\
		  7 8

Preorder: 1, 2, 4, 3, 5, 7, 8, 6
Inorder: 2, 4, 1, 7, 5, 8, 3, 6
Postorder: 4, 2, 7, 8, 5, 6, 3, 1

Binary Search Tree:

A balanced tree is a tree with the minimum possible maximum height

To calculate the minimum maximum height where N is the number of nodes in the tree use this formula:
	floor(log(2) N) = minimum maximum value

A binary search tree (bst) is a binary search tree with an ordering property

We will use this ordering property :
	Given a root, the items contained in the left subtree are less than the root, the items in the right subtree are greater to or equal to the root

The benefit of a BST is that if the tree is balanced, then the following operations should be O(log(2) N), where N is the number of items in the tree
	a) find(x)
	b) insert(x)
	c) remove(x)

Insert alorithm for BST:
Given a value x start at the root and insert x as a leaf following these steps:
	1. If the tree is empty then x is the root.
	2. Else if x is less than the current root and the left subtree is empty, insert x as the root of the left subtree
	3. Else if x is greater than or equal to the current root and the right subtree is empty insertx as the root of the right subtree
	4. Else if x is less than the current subtree go left
	5. Else go right
4, 8, 12, 5, 14, 21, 2, 1
4
2 8
1 5 12
     14
      21
Inorder: 1, 2, 4, 5, 8, 12, 14, 21

Sequence: 8, 4, 5, 2, 1, 14, 12, 21

5/8/17
		10
		/  \ 
		5  25
		/\  /
		4 7 13
		    /
		   11
		   \
		    12
Preorder: 10, 5, 4, 7, 25, 13, 11, 12
Inorder: 4, 5, 7, 10, 11, 12, 13, 25
Postorder: 4, 7, 5, 12, 11, 13, 25, 10

An internal node of a binary tree is a node with at least one child

Removal Algorithm for BST:
1. If the tree is empty, STOP 
2. If the val is a leaf remove a leaf
3. If the val is an internal node with no right subtree, then transfer, the maximum value, max, from the left subtree into the node that contains val, then remove max from the left subtree.
4. Otherwise, transfer the minimum value, min, from the right subtree into the node that contains val, then reove min from the right subtree

*----------------------*
A set is a collection of objects
An object is either contained in the set or it is not. THerefore all the objects in the set are unique (no duplicates).
**A set may be ordered

A TreeSet is a set of ordered objects. The objects in a TreeSort must be comparable.


