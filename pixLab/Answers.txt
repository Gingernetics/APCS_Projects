Activity 1:
1. How many bits does it take to represent the values from 0 to 255?
256 values
2. How many bytes does it take to represent a color in the RGB color model?
256 / 8 = 32
3. How many pixels are in a picture that is 640 pixels wide and 480 pixels high?
640 x 480 = 307200

Activity 2:
1. How can you make pink?
	255, 0, 255
2. How can you make yellow?
	255, 255, 0
3. How can you make purple?
	100, 0, 140
4. How can you make white?
	255, 255, 255
5. How can you make dark gray?
	100, 100, 100

Activity 3:
1. What is the row index for the top left corner of the picture?
	0
2. What is the column index for the top left corner of the picture?
	0
3. The width of this picture is 640. What is the right most column index?
	640
4. The height of this picture is 480. What is the bottom most row index?
	480
5. Does the row index increase from left to right or top to bottom?
	top to bottom (rows)
6. Does the column index increase from left to right or top to bottom?
	left to right (columns)
7. Set the zoom to 500%. Can you see squares of color? This is called pixelation. Pixelation means displaying a picture so magnified that the individual pixels look like small squares.
	N/A

Activity 4:
		public int getCount(){
		int total = 0;
    		for (int[] rowArray : matrix)
     			for (int item : rowArray)
				if (item == key)
        				total = total + item;
    		return total;
	}
		public int getLargest(){
		int total = 0;
    		for (int[] rowArray : matrix)
     			for (int item : rowArray)
				if (item > total)
        				total = item;
    		return total;
	}
		public int getColTotal(int key){
		int total = 0;
    		for (int[] rowArray : matrix)
     			for (int col = 0; col < rowArray.length; col++){
				if (col == key)
        				total += rowArray[col];
		}		
    		return total;
}

Activity 5:
1. Open Picture.java and look for the method getPixels2D. Is it there? 
	No

2. Open SimplePicture.java and look for the method getPixels2D. Is it there? 
	Yes

3. Does the following code compile? DigitalPicture p = new DigitalPicture(); 
	No

4. Assuming that a no-argument constructor exists for SimplePicture, would the following code compile? DigitalPicture p = new SimplePicture(); 
	Yes

5. Assuming that a no-argument constructor exists for Picture, does the following code compile? DigitalPicture p = new Picture(); 
	Yes

6. Assuming that a no-argument constructor exists for Picture, does the following code compile? SimplePicture p = new Picture(); 
	Yes

7. Assuming that a no-argument constructor exists for SimplePicture, does the following code compile? Picture p = new SimplePicture();
	No

/** Method to set the blue to 0 */
  public void zeroBlue()
  {
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setBlue(0);
      }
    }
  }
  
  public void keepOnlyBlue()
  {
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setRed(0);
        pixelObj.setGreen(0);
      }
    }
  }
  
  public void negate()
  {
    
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setRed(pixelObj.getRed() - 255);
        pixelObj.setGreen(pixelObj.getGreen() - 255);
        pixelObj.setBlue(pixelObj.getBlue() - 255);
      }
    }
  }
  
  public void grayscale()
  {
    
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        int avg = (int) ((pixelObj.getRed() + pixelObj.getGreen() + pixelObj.getBlue()) / 3);
        pixelObj.setRed(avg);
        pixelObj.setGreen(avg);
        pixelObj.setBlue(avg);
      }
    }
  }
  
  public void fixUnderwater()
  {
    Pixel[][] pixels = this.getPixels2D();
    
    int redAvg = 0;
    int greenAvg = 0;
    int blueAvg = 0;
    int totalPixels = 0;
    
    int maxRed = 0;
    int minRed = 255;
    int maxGreen = 0;
    int minGreen = 255;
    int maxBlue = 0;
    int minBlue = 255;
    
    for (int row = 26; row < 36; row++)
    {
      for (int col = 178; col < 198; col++)
      {
        totalPixels++;
        
        Pixel myPixel = pixels[row][col];
        
        redAvg += myPixel.getRed();
        greenAvg += myPixel.getGreen();
        blueAvg += myPixel.getBlue();
        
        if (myPixel.getRed() > maxRed) { maxRed = myPixel.getRed(); }
        if (myPixel.getRed() < minRed) { minRed = myPixel.getRed(); }
        if (myPixel.getGreen() > maxGreen) { maxGreen = myPixel.getGreen(); }
        if (myPixel.getGreen() < minGreen) { minGreen = myPixel.getGreen(); }
        if (myPixel.getBlue() > maxBlue) { maxBlue = myPixel.getBlue(); }
        if (myPixel.getGreen() < minBlue) { minBlue = myPixel.getBlue(); }
        
      }
    }
    
    redAvg = redAvg / totalPixels;
    greenAvg = greenAvg / totalPixels;
    blueAvg = blueAvg / totalPixels;
    
    Color averageColor = new Color(redAvg, greenAvg, blueAvg);
    
    int redRange = (maxRed - minRed);
    int greenRange = (maxGreen - minGreen);
    int blueRange = (maxBlue - minBlue);
    
    int redDistance = redRange;
    int greenDistance = greenRange;
    int blueDistance = blueRange;
    
    double maxDistance = Math.sqrt(redDistance * redDistance +
                                   greenDistance * greenDistance +
                                   blueDistance * blueDistance);
   
    for (int row = 0; row < pixels.length; row++){
      for (int col = 0; col < pixels[0].length; col++)     {
        Pixel myPixel = pixels[row][col]; 
        boolean closeEnough = myPixel.colorDistance(averageColor) < maxDistance * 2; 
        if (closeEnough)        {
          myPixel.setBlue(myPixel.getBlue() + 50);
        }
        else        {
          myPixel.setBlue(myPixel.getBlue() - 50);
        }
      }
    }
  }

Activity 6:

  public void mirrorVertical()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int width = pixels[0].length;
    for (int row = 0; row < pixels.length; row++)
    {
      for (int col = 0; col < width / 2; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][width - 1 - col];
        leftPixel.setColor(rightPixel.getColor());
      }
    } 
  }

 public void mirrorHorizontal()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel topPixel = null;
    Pixel botPixel = null;
    int height = pixels.length;
    for (int row = 0; row < height / 2; row++)
    {
      for (int col = 0; col < pixels[0].length; col++)
      {
        topPixel = pixels[row][col];
        botPixel = pixels[height - 1 - row][col];
        botPixel.setColor(topPixel.getColor());
      }
    } 
  }

 public void mirrorHorizontalBotToTop()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel topPixel = null;
    Pixel botPixel = null;
    int height = pixels.length;
    for (int row = 0; row < height / 2; row++)
    {
      for (int col = 0; col < pixels[0].length; col++)
      {
        topPixel = pixels[row][col];
        botPixel = pixels[height - 1 - row][col];
        topPixel.setColor(botPixel.getColor());
      }
    } 
  }


 public void mirrorDiagonal()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel oriPixel = null;
    Pixel botPixel = null;
    int height = pixels.length;
	
    for (int row = 0; row < height; row++)
    {
      for (int col = 0; col < pixels.length; col++)
      {
	if (col > row){
        oriPixel = pixels[row][col];
        botPixel = pixels[col][row];
        oriPixel.setColor(botPixel.getColor());
	}
      }
    } 
  }

Activity 7:
1. How many times would the body of this nested for loop execute?
for (int row = 7; row < 17; row++)
for (int col = 6; col < 15; col++)
	90	
2. How many times would the body of this nested for loop execute?
for (int row = 5; row <= 11; row++)
for (int col = 3; col <= 18; col++)
	112

  public void mirrorTemple(){
    int mirrorPoint = 276;
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int count = 0;
    Pixel[][] pixels = this.getPixels2D();

    for (int row = 27; row < 97; row++){
      for (int col = 13; col < mirrorPoint; col++){
        leftPixel = pixels[row][col];      
        rightPixel = pixels[row]                       
        [mirrorPoint - col + mirrorPoint];
        rightPixel.setColor(leftPixel.getColor());
	count++;
      }
    }
	System.out.println(count);
  }

 public void mirrorArms(){
	//top right corner - r:160, col:100
	//bot left corner - r:195, col:169

	//top left corner - r:173, col:239
	//bot right r:198, col: 295
    	int mirrorPoint1 = 196;
	int mirrorPoint2 = 199;
    Pixel topPixel = null;
    Pixel botPixel = null;
    Pixel[][] pixels = this.getPixels2D();
	//left arm
    for (int row = 160; row < 196; row++)    {
      for (int col = 100; col < 170; col++)      {
        topPixel = pixels[row][col];      
        botPixel = pixels[mirrorPoint1 - row + mirrorPoint1][col];
        botPixel.setColor(topPixel.getColor());
      }
    }
	//right arm
	for (int row = 173; row < 199; row++)    {
      for (int col = 239; col < 296; col++)      {
        topPixel = pixels[row][col];      
        botPixel = pixels[mirrorPoint2 - row + mirrorPoint2][col];
        botPixel.setColor(topPixel.getColor());
      }
    }
  }

  public void mirrorGull(){
	//top left corner - r:227, col:235
	//bot right corner - r:328, col:353
    Pixel topPixel = null;
    Pixel botPixel = null;
    Pixel[][] pixels = this.getPixels2D();
	//copy mechanism
    for (int row = 227; row < 328; row++)    {
      for (int col = 235; col < 353; col++)      {
        topPixel = pixels[row][col];      
        botPixel = pixels[row + 20][col + 160];
        botPixel.setColor(topPixel.getColor());
      }
    }
  }

Activity 8:
public void copySecond(Picture fromPic, int startRow, int endRow, int startCol, int endCol)
  {
    Pixel fromPixel = null;
    Pixel toPixel = null;
    Pixel[][] toPixels = this.getPixels2D();
    Pixel[][] fromPixels = fromPic.getPixels2D();
    for (int fromRow = 0, toRow = startRow; fromRow < fromPixels.length && toRow < endRow; fromRow++, toRow++)
    {
      for (int fromCol = 0, toCol = startCol; 
           fromCol < fromPixels[0].length &&
           toCol < endCol;  
           fromCol++, toCol++)
      {
        fromPixel = fromPixels[fromRow][fromCol];
        toPixel = toPixels[toRow][toCol];
        toPixel.setColor(fromPixel.getColor());
      }
    } 
  }

//in PictureTester.java
public void myCollage()
  {
      Picture flower1 = new Picture("flower1.jpg");
      this.copySecond(flower1,10,20, 0, 100);
      this.write("mycollage.jpg");
  }

Activity 9:

public void edgeDetection(int edgeDist){

	//instance variables
    	Pixel leftPixel = null;
   	Pixel rightPixel = null;
	Pixel botPixel = null;
    	Pixel[][] pixels = this.getPixels2D();
    	Color rightColor = null;
	Color botColor = null;

	//running through .jpg
    for (int row = 0; row < pixels.length; row++){
      for (int col = 0; col < pixels[0].length-1; col++){
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][col+1];
	rightColor = rightPixel.getColor();

	//only assigns nonnull value to botPixel if not last row
	if (row < pixels.length - 1){
		botPixel = pixels[row + 1][col];
		botColor = botPixel.getColor();}

	//If there is a big difference, pixel changed to black -- else white
        if ((leftPixel.colorDistance(rightColor) > 
            edgeDist) || (botPixel != null && botPixel.colorDistance(botColor) > edgeDist))
          leftPixel.setColor(Color.BLACK);
        else
          leftPixel.setColor(Color.WHITE);
      }
    }
  }

Different Algorithms for Edge Detection
-Play around with comparing top/bot/left/right pixels
-

	
